# Adobe Challenge 1B: Persona-Driven Document Intelligence

## Overview

This project solves the Adobe Document Intelligence Challenge 1B, building a system to extract and rank the most relevant sections from a set of documents based on a specific persona and job-to-be-done.

The system processes PDF documents by:

- Extracting section titles/headings (`process_pdfs.py`)
- Computing semantic similarity to a persona/job description
- Outputting a JSON containing:
  - Metadata
  - Top 5 ranked sections
  - A summary of those sections

---

## Folder Structure

<root_folder>/                    # This is the root folder path you pass as an argument to the script
├── process_pdfs.py              # Your PDF heading extraction script (must be importable)
├── parsed_json/                 # This folder will be created automatically by the script
│   ├── <subfolder_1>/           # JSON files for PDFs inside subfolder_1
│   │   ├── file01.json
│   │   ├── file02.json
│   │   └── ...
│   └── <subfolder_2>/           # JSON files for PDFs inside subfolder_2
│       ├── file1.json
│       ├── file2.json
│       └── ...
├── <subfolder_1>/               # Example subfolder, e.g. Collection_1 or any user folder
│   ├── challenge1b_input.json  # Input JSON defining PDF list, persona, and job
│   ├── pdfs/                   # Folder containing the actual PDF files
│   │   ├── file01.pdf
│   │   ├── file02.pdf
│   │   └── ...
│   └── challenge1b_output.json # Output JSON generated by your script
├── <subfolder_2>/               # Another subfolder with similar content
│   ├── challenge1b_input.json
│   ├── pdfs/
│   │   ├── file1.pdf
│   │   ├── file2.pdf
│   │   ├── file3.pdf
│   │   └── ...
│   └── challenge1b_output.json
└── ...                         # Additional subfolders as needed

---

## Setup Instructions

### Python Version

- Use **Python 3.7** or higher.

### Install Dependencies

pip install pymupdf sentence-transformers numpy

---

## Input Format (`challenge1b_input.json`)

{
"persona": { "role": "Travel Planner" },
"job_to_be_done": { "task": "Plan a trip of 4 days for a group of 10 college friends." },
"documents": [
{ "filename": "South of France - Tips and Tricks.pdf" },
{ "filename": "South of France - Cuisine.pdf" }
]
}


* Note: The filenames listed must **exactly match** the PDF names in the `pdfs/` folder.

---

## How to Run

Run the main pipeline by specifying the root folder containing your collections:

python main_pipeline.py /path/to/your-root-folder
This will:

- Parse PDFs using `process_pdfs.py` to extract section headings.
- Generate parsed JSON files under `parsed_json/Collection_X/`.
- Compute section ranking via semantic similarity to the persona/job.
- Generate `challenge1b_output.json` in each collection folder.

---

## Output Format (`challenge1b_output.json`)

{
  "metadata": {
    "input_documents": [
      "... (list of input document filenames or details here) ..."
    ],
    "persona": "... (persona description here) ...",
    "job_to_be_done": "... (job to be done description here) ...",
    "processing_timestamp": "... (ISO 8601 timestamp here) ..."
  },
  "extracted_sections": [
    {
      "document": "... (document name here) ...",
      "section_title": "... (section title here) ...",
      "importance_rank": 1,
      "page_number": 5
    }
    // Add 4 more section objects similarly, total 5 sections
  ],
  "subsection_analysis": [
    {
      "document": "... (document name related to subsection) ...",
      "refined_text": "... (summary or refined text of the subsection) ...",
      "page_number": 5
    }
    // Add 4 more subsection objects similarly, total 5 subsections
  ]
}


---

## Constraints Handled

- ✅ Runs on CPU only
- ✅ Model size < 1GB (`all-mpnet-base-v2`)
- ✅ Completes in < 60s for 3–5 documents
- ✅ Works offline (no internet required after model download)

---

## Troubleshooting

| Problem                | Solution                                                                      |
| ---------------------- | ----------------------------------------------------------------------------- |
| `ModuleNotFoundError`  | Run `pip install` for missing modules like `pymupdf`, `sentence-transformers` |
| Output missing         | Ensure filenames match and `pdfs/` folder exists                              |
| Input JSON not found   | Verify `challenge1b_input.json` exists in collection folder                   |
| Slow first run         | Initial model download is large; subsequent runs will be much faster          |

---

**Happy coding!**

